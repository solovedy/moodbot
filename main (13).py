import asyncio
pending_mood_users = {}
import sqlite3
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os
import requests
from io import BytesIO

from flask import Flask
from threading import Thread

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes  # <-- —ç—Ç–æ –≤–∞–∂–Ω–æ!
)

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEATHER_TOKEN = os.environ.get("WEATHER_API_KEY")

# üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("mood.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS moods (
        user_id INTEGER,
        mood INTEGER,
        date TEXT
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS cities (
        user_id INTEGER PRIMARY KEY,
        city TEXT
    )
''')
conn.commit()

# üß† –ü–æ–¥–ø–∏—Å–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º
mood_keyboard = ReplyKeyboardMarkup(
    [[
        "1 üíÄ –•–æ—á—É –∏—Å—á–µ–∑–Ω—É—Ç—å", "2 üåßÔ∏è –í—Å—ë –≤–∞–ª–∏—Ç—Å—è –∏–∑ —Ä—É–∫", "3 üòï –î–µ–Ω—å –∫–∞–∫–æ–π-—Ç–æ –Ω–µ —Ç–∞–∫–æ–π"
    ], [
        "4 üòê –ü—Ä–æ—Å—Ç–æ –¥–µ–Ω—å", "5 üåø –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∑–µ–Ω", "6 üåû –ù–∞ –ø–æ–¥—ä—ë–º–µ!", "7 üöÄ –Ø –ª–µ—á—É –æ—Ç —Å—á–∞—Å—Ç—å—è!"
    ]],
    resize_keyboard=True
)

# üå§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def get_weather(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code != 200:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üò¢"

    data = response.json()
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    description = data['weather'][0]['description'].capitalize()
    emoji = "‚òÄÔ∏è" if "clear" in data['weather'][0]['main'].lower() else "üå•Ô∏è"
    return f"{emoji} –í {city} —Å–µ–π—á–∞—Å {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C. {description}."

# üå§ /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT city FROM cities WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /setcity üåç")
        return
    city = row[0]
    await update.message.reply_text(get_weather(city))

# üìç /setcity
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /setcity [–≥–æ—Ä–æ–¥], –Ω–∞–ø—Ä–∏–º–µ—Ä: /setcity –ê–ª–º–∞—Ç—ã")
        return
    city = " ".join(context.args)
    user_id = update.effective_user.id
    cursor.execute("INSERT OR REPLACE INTO cities (user_id, city) VALUES (?, ?)", (user_id, city))
    conn.commit()
    await update.message.reply_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city} ‚úÖ")

# üìç /mycity
async def my_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT city FROM cities WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        await update.message.reply_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {row[0]} üèôÔ∏è")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π /setcity [–≥–æ—Ä–æ–¥]")

# üÜò /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/mood ‚Äî –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "/mood_week ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/mood_month ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü\n"
        "/mood_all ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
        "/setcity [–≥–æ—Ä–æ–¥] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥\n"
        "/mycity ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥\n"
        "/weather ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# üëã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–≥–æ–¥—É.\n\n"
        "–ù–∞–∂–º–∏ /mood —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å üí¨"
    )

# ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
async def remind_if_no_mood(user_id, context):
    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
    if pending_mood_users.get(user_id):
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üì© –ù–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            pending_mood_users.pop(user_id, None)

# üå° /mood
async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["waiting_for_mood"] = True
    user_id = update.effective_user.id
    pending_mood_users[user_id] = True
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=mood_keyboard)
    asyncio.create_task(remind_if_no_mood(user_id, context))

# üí¨ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.strip()
    user_id = update.message.from_user.id

    if update.message.chat.type != "private" and not message.lower().startswith(f"@{context.bot.username.lower()}"):
        return

    if message.lower().startswith(f"@{context.bot.username.lower()}"):
        message = message[len(f"@{context.bot.username.lower()}"):].strip()

    if not context.user_data.get("waiting_for_mood"):
        return

    if message and message[0].isdigit():
        mood_value = int(message[0])
        if mood_value < 1 or mood_value > 7:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 7 üòä")
            return

        cursor.execute("INSERT INTO moods (user_id, mood, date) VALUES (?, ?, ?)", (
            user_id, mood_value, datetime.now().strftime("%Y-%m-%d")
        ))
        conn.commit()
        context.user_data["waiting_for_mood"] = False
        pending_mood_users.pop(user_id, None)

        responses = {
            1: "üò© –î–µ—Ä–∂–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π /breathe –∏–ª–∏ /advice ‚Äî –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–µ–≥—á–∏—Ç—å –¥–µ–Ω—å.",
            2: "üò£ –≠—Ç–æ –ø—Ä–æ–π–¥—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π /motivate –∏–ª–∏ /breathe ‚Äî —Ç–µ–±–µ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥—á–µ!",
            3: "üòï –ù–∞–¥–µ—é—Å—å, –¥–µ–Ω—å —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ. –ó–∞–≥–ª—è–Ω–∏ –≤ /joke –¥–ª—è —É–ª—ã–±–∫–∏.",
            4: "üôÇ –ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.",
            5: "üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º–æ–º–µ–Ω—Ç–æ–º!",
            6: "üòÄ –û—Ç–ª–∏—á–Ω–æ! –ó–∞—Ä—è–∂–∞–π –ø–æ–∑–∏—Ç–∏–≤–æ–º –¥—Ä—É–≥–∏—Ö!",
            7: "ü§© –£—Ä–∞! –¢–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! ‚≠ê"
        }

        await update.message.reply_text(responses[mood_value])
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üòä")

# üìä –ì—Ä–∞—Ñ–∏–∫
# (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å ‚Äî –æ–Ω —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)

# üìä /mood_week
async def mood_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_mood_graph(update, days=7)

# üìä /mood_month
async def mood_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_mood_graph(update, days=30)

# üìä /mood_all
async def mood_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_mood_graph(update)

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "I'm alive! ü§ñ"

def run():
    app_flask.run(host='0.0.0.0', port=8080)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CommandHandler("mood_week", mood_week))
    app.add_handler(CommandHandler("mood_month", mood_month))
    app.add_handler(CommandHandler("mood_all", mood_all))
    app.add_handler(CommandHandler("setcity", set_city))
    app.add_handler(CommandHandler("mycity", my_city))
    app.add_handler(CommandHandler("weather", weather))

   
    # üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç 1 –¥–æ 7
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ‚úÖ")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    Thread(target=run).start()

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if str(e).startswith("This event loop is already running"):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
