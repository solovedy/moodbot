import os
import asyncio
import sqlite3
from datetime import datetime, timedelta
import requests
from io import BytesIO

# Matplotlib –±–µ–∑ GUI
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

from flask import Flask, request

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ================== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==================
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEATHER_TOKEN = os.environ.get("WEATHER_API_KEY")
URL = os.environ.get("APP_URL")  # –ø—Ä–∏–º–µ—Ä: https://your-repl-name.username.repl.co  (–±–µ–∑ —Å–ª–µ—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ)

if not BOT_TOKEN or not URL:
    print("‚ùóÔ∏è–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ Secrets –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏ APP_URL")

# ================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ==================
conn = sqlite3.connect("mood.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS moods (
        user_id INTEGER,
        mood INTEGER,
        date TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS cities (
        user_id INTEGER PRIMARY KEY,
        city TEXT
    )
""")
conn.commit()

# ================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π ==================
mood_keyboard = ReplyKeyboardMarkup(
    [
        ["1 üíÄ –•–æ—á—É –∏—Å—á–µ–∑–Ω—É—Ç—å", "2 üåßÔ∏è –í—Å—ë –≤–∞–ª–∏—Ç—Å—è –∏–∑ —Ä—É–∫", "3 üòï –î–µ–Ω—å –∫–∞–∫–æ–π-—Ç–æ –Ω–µ —Ç–∞–∫–æ–π"],
        ["4 üòê –ü—Ä–æ—Å—Ç–æ –¥–µ–Ω—å", "5 üåø –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∑–µ–Ω", "6 üåû –ù–∞ –ø–æ–¥—ä—ë–º–µ!", "7 üöÄ –Ø –ª–µ—á—É –æ—Ç —Å—á–∞—Å—Ç—å—è!"],
    ],
    resize_keyboard=True
)

# ================== –ü–æ–≥–æ–¥–∞ ==================
def get_weather(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üò¢"
    if response.status_code != 200:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üò¢"

    data = response.json()
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    description = data['weather'][0]['description'].capitalize()
    main = data['weather'][0]['main'].lower()
    emoji = "‚òÄÔ∏è" if ("clear" in main or "sun" in main) else "üå•Ô∏è"
    return f"{emoji} –í {city} —Å–µ–π—á–∞—Å {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C. {description}."

# ================== –ö–æ–º–∞–Ω–¥—ã ==================
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /setcity [–≥–æ—Ä–æ–¥], –Ω–∞–ø—Ä–∏–º–µ—Ä: /setcity –ê–ª–º–∞—Ç—ã")
        return
    city = " ".join(context.args)
    user_id = update.effective_user.id
    cursor.execute("INSERT OR REPLACE INTO cities (user_id, city) VALUES (?, ?)", (user_id, city))
    conn.commit()
    await update.message.reply_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city} ‚úÖ")

async def my_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT city FROM cities WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        await update.message.reply_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {row[0]} üèôÔ∏è")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π /setcity [–≥–æ—Ä–æ–¥]")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT city FROM cities WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /setcity üåç")
        return
    city = row[0]
    await update.message.reply_text(get_weather(city))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/mood ‚Äî –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "/mood_week ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/mood_month ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü\n"
        "/mood_all ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
        "/setcity [–≥–æ—Ä–æ–¥] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥\n"
        "/mycity ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥\n"
        "/weather ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–≥–æ–¥—É.\n\n"
        "–ù–∞–∂–º–∏ /mood —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å üí¨"
    )

# ============== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ==============
pending_mood_users = {}

async def remind_if_no_mood(user_id, context):
    await asyncio.sleep(600)
    if pending_mood_users.get(user_id):
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üì© –ù–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        finally:
            pending_mood_users.pop(user_id, None)

# ============== /mood –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–æ–π ==============
async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["waiting_for_mood"] = True
    user_id = update.effective_user.id
    pending_mood_users[user_id] = True
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=mood_keyboard)
    asyncio.create_task(remind_if_no_mood(user_id, context))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (update.message.text or "").strip()
    user_id = update.effective_user.id

    if not context.user_data.get("waiting_for_mood"):
        return

    if message and message[0].isdigit():
        mood_value = int(message[0])
        if 1 <= mood_value <= 7:
            cursor.execute(
                "INSERT INTO moods (user_id, mood, date) VALUES (?, ?, ?)",
                (user_id, mood_value, datetime.now().strftime("%Y-%m-%d"))
            )
            conn.commit()
            context.user_data["waiting_for_mood"] = False
            pending_mood_users.pop(user_id, None)

            responses = {
                1: "üò© –î–µ—Ä–∂–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π /breathe –∏–ª–∏ /advice.",
                2: "üò£ –≠—Ç–æ –ø—Ä–æ–π–¥—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π /motivate –∏–ª–∏ /breathe!",
                3: "üòï –ù–∞–¥–µ—é—Å—å, –¥–µ–Ω—å —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ. –ó–∞–≥–ª—è–Ω–∏ –≤ /joke –¥–ª—è —É–ª—ã–±–∫–∏.",
                4: "üôÇ –ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.",
                5: "üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º–æ–º–µ–Ω—Ç–æ–º!",
                6: "üòÄ –û—Ç–ª–∏—á–Ω–æ! –ó–∞—Ä—è–∂–∞–π –ø–æ–∑–∏—Ç–∏–≤–æ–º –¥—Ä—É–≥–∏—Ö!",
                7: "ü§© –£—Ä–∞! –¢–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! ‚≠ê"
            }
            await update.message.reply_text(responses[mood_value])
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 7 üòä")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ üòä")

# ============== –ì—Ä–∞—Ñ–∏–∫–∏ ==============
async def send_mood_graph(update: Update, days: int | None = None):
    user_id = update.effective_user.id
    if days:
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        cursor.execute("SELECT date, mood FROM moods WHERE user_id = ? AND date >= ?", (user_id, start_date))
    else:
        cursor.execute("SELECT date, mood FROM moods WHERE user_id = ?", (user_id,))

    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ üòï")
        return

    mood_by_date = {}
    for date_str, mood_val in rows:
        mood_by_date.setdefault(date_str, []).append(mood_val)

    dates = sorted(mood_by_date.keys())
    moods = [sum(mood_by_date[d]) / len(mood_by_date[d]) for d in dates]

    plt.style.use('ggplot')
    plt.figure(figsize=(12, 6))
    plt.plot(dates, moods, marker='o', color='#2F4F4F')

    average_mood = sum(moods) / len(moods)
    plt.axhline(average_mood, color='gray', linestyle='--')
    plt.text(dates[-1], average_mood + 0.2, f"–°—Ä–µ–¥–Ω–µ–µ: {average_mood:.2f}", fontsize=10)

    plt.title("üìä –¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–£—Ä–æ–≤–µ–Ω—å (1‚Äì7)")
    plt.ylim(0.5, 7.8)
    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    await update.message.reply_photo(photo=InputFile(buf, filename="mood_chart.png"))

async def mood_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_mood_graph(update, days=7)

async def mood_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_mood_graph(update, days=30)

async def mood_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_mood_graph(update)

# ============== Flask + Telegram Application ==============
app = Flask(__name__)
telegram_app = Application.builder().token(BOT_TOKEN).build()

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("help", help_command))
telegram_app.add_handler(CommandHandler("mood", mood))
telegram_app.add_handler(CommandHandler("mood_week", mood_week))
telegram_app.add_handler(CommandHandler("mood_month", mood_month))
telegram_app.add_handler(CommandHandler("mood_all", mood_all))
telegram_app.add_handler(CommandHandler("setcity", set_city))
telegram_app.add_handler(CommandHandler("mycity", my_city))
telegram_app.add_handler(CommandHandler("weather", weather))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    print("== –ü—Ä–∏—à—ë–ª –∞–ø–¥–µ–π—Ç:", data)  # üëà –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    update = Update.de_json(data, telegram_app.bot)
    telegram_app.update_queue.put_nowait(update)
    return "ok", 200

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏ ‚úÖ"

# ============== –ó–∞–ø—É—Å–∫ ==============
if __name__ == "__main__":
    async def _startup():
        await telegram_app.initialize()
        await telegram_app.start()
        resp = await telegram_app.bot.set_webhook(f"{URL}/{BOT_TOKEN}")
        print("== setWebhook –æ—Ç–≤–µ—Ç:", resp)  # üëà –≤–∏–¥–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
        info = await telegram_app.bot.get_webhook_info()
        print("== getWebhookInfo:", info.to_dict())  # üëà –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞

    import nest_asyncio
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(_startup())

    app.run(host="0.0.0.0", port=8080)
