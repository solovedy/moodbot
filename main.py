import sqlite3
import matplotlib.pyplot as plt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import logging
import datetime
import io

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect('mood_data.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS moods (
    user_id INTEGER,
    username TEXT,
    mood TEXT,
    date TEXT
)""")
conn.commit()

# –®–∫–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
mood_options = [
    ("1", "–ü–æ–ª–Ω—ã–π —à—Ç–∏–ª—å ‚Äî –Ω–∏ —ç–º–æ—Ü–∏–π, –Ω–∏ —ç–Ω–µ—Ä–≥–∏–∏"),
    ("2", "–¢—É—á–∏ —Å–≥—É—â–∞—é—Ç—Å—è, –Ω–æ –¥–µ—Ä–∂—É—Å—å"),
    ("3", "–ü–æ–≥–æ–¥–∞ –ø–∞—Å–º—É—Ä–Ω–∞—è, –Ω–æ –∂–∏—Ç—å –º–æ–∂–Ω–æ"),
    ("4", "–í–µ—Ç–µ—Ä –ø–µ—Ä–µ–º–µ–Ω ‚Äî —É–∂–µ –ª–µ–≥—á–µ"),
    ("5", "–ù–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ —Å–æ–ª–Ω—Ü–µ ‚Äî –µ—Å—Ç—å –Ω–∞–¥–µ–∂–¥–∞"),
    ("6", "–°–≤–µ—Ç–ª–æ, —Ç–µ–ø–ª–æ, –∏ —Å–µ—Ä–¥—Ü–µ —Å–ø–æ–∫–æ–π–Ω–æ"),
    ("7", "–í–∞—É! –õ–µ—Ç–∞—é –æ—Ç —Å—á–∞—Å—Ç—å—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è")
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(text, callback_data=value)] for value, text in mood_options]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ü–µ–Ω–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def mood_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mood_value = query.data
    user = query.from_user
    username = user.username or user.first_name
    date = datetime.date.today().isoformat()
    mood_text = next(text for value, text in mood_options if value == mood_value)

    cursor.execute("INSERT INTO moods VALUES (?, ?, ?, ?)", (user.id, username, mood_text, date))
    conn.commit()

    await query.edit_message_text(f"üìù –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {mood_text}")

# –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT mood FROM moods")
    moods = [row[0] for row in cursor.fetchall()]
    if not moods:
        await update.message.reply_text("üòï –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.")
        return

    mood_counts = {text: moods.count(text) for _, text in mood_options if moods.count(text) > 0}
    labels = list(mood_counts.keys())
    values = list(mood_counts.values())

    plt.figure(figsize=(10, 5))
    bars = plt.barh(labels, values, color="skyblue")
    plt.xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–∞—Ç–∞")
    plt.tight_layout()

    buffer = io.BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    await update.message.reply_photo(photo=buffer)

# –ö–æ–º–∞–Ω–¥–∞ /my_mood_summary ‚Äî –ª–∏—á–Ω—ã–π –∏—Ç–æ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
async def my_mood_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    today = datetime.date.today()
    week_ago = today - datetime.timedelta(days=7)

    cursor.execute("SELECT mood FROM moods WHERE user_id=? AND date>=?", (user.id, week_ago.isoformat()))
    mood_rows = cursor.fetchall()

    if not mood_rows:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    mood_values = []
    for row in mood_rows:
        for value, text in mood_options:
            if text == row[0]:
                mood_values.append(int(value))

    avg_mood = round(sum(mood_values) / len(mood_values), 1)

    # –ü–æ–¥–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
    if avg_mood <= 3:
        text = (
            f"üíî –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –≤–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: *{avg_mood}*\n\n"
            "–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è. –í—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—Å—è üíô\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:\n"
            "`/breathe` ‚Äî –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            "`/motivate` ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
            "`/advice` ‚Äî —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        )
    elif 4 <= avg_mood <= 5:
        text = (
            f"üôÇ –í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: *{avg_mood}*\n\n"
            "–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å –º–æ–ª–æ–¥—Ü–æ–º! üí™\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–ª–µ—á—å—Å—è –Ω–µ–º–Ω–æ–≥–æ: `/joke` ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞ üòÑ"
        )
    else:
        text = (
            f"üåü –í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: *{avg_mood}*\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ü—É—Å—Ç—å –≤—Å—ë –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–∞–∫ –∂–µ —Ö–æ—Ä–æ—à–æ ‚ù§Ô∏è"
        )

    await update.message.reply_text(text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
TOKEN = "8038267384:AAGSbmkV7KG09UjyxXBiPkm0SIatxIIuzp0"

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("my_mood_summary", my_mood_summary))
    app.add_handler(CallbackQueryHandler(mood_callback))
    
    app.run_polling()
