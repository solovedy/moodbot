import logging
import sqlite3
import datetime
import matplotlib.pyplot as plt
import io
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)

import os
TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = "–¢–í–û–ô_API_–ö–õ–Æ–ß_–ü–û–ì–û–î–´"

# –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
mood_labels = {
    1: "üò£ –£–∂–∞—Å–Ω–æ",
    2: "üòî –ü–ª–æ—Ö–æ",
    3: "üòï –¢–∞–∫ —Å–µ–±–µ",
    4: "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ",
    5: "üôÇ –•–æ—Ä–æ—à–æ",
    6: "üòÑ –û—Ç–ª–∏—á–Ω–æ",
    7: "ü§© –í–∞—É!"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–î
conn = sqlite3.connect("mood_data.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS moods (
    user_id INTEGER,
    mood INTEGER,
    date TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    city TEXT
)
""")
conn.commit()


# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π /mood —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/mood ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/mood_week ‚Äî –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é üìÖ
/mood_month ‚Äî –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü üìà
/mood_all ‚Äî –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üìä
/setcity ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ üèô
/mycity ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ üó∫
""")


async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(label, callback_data=str(i))]
        for i, label in mood_labels.items()
    ]
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=InlineKeyboardMarkup(keyboard))


async def mood_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mood = int(query.data)
    user_id = query.from_user.id
    date = datetime.date.today().isoformat()

    cursor.execute("INSERT INTO moods (user_id, mood, date) VALUES (?, ?, ?)", (user_id, mood, date))
    conn.commit()

    text = f"–ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_labels[mood]}"

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏
    if mood <= 3:
        text += "\n–ü–æ–ø—Ä–æ–±—É–π /breathe, /motivate –∏–ª–∏ /task"
    elif mood == 4:
        text += "\n–ú–æ–∂–µ—Ç, –∞–Ω–µ–∫–¥–æ—Ç? –ü–æ–ø—Ä–æ–±—É–π /joke"
    elif mood >= 5:
        text += "\n–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™"

    await query.edit_message_text(text)


# –ì—Ä–∞—Ñ–∏–∫
def generate_mood_graph(user_id, days=None):
    if days:
        since_date = (datetime.date.today() - datetime.timedelta(days=days)).isoformat()
        cursor.execute("SELECT date, mood FROM moods WHERE user_id=? AND date>=?", (user_id, since_date))
    else:
        cursor.execute("SELECT date, mood FROM moods WHERE user_id=?", (user_id,))
    
    data = cursor.fetchall()
    if not data:
        return None

    dates, moods = zip(*data)
    dates = [datetime.datetime.strptime(d, "%Y-%m-%d") for d in dates]

    plt.figure(figsize=(7, 4))
    plt.plot(dates, moods, marker='o', linestyle='-', color='purple')
    plt.title("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–£—Ä–æ–≤–µ–Ω—å")
    plt.yticks(range(1, 8), [mood_labels[i] for i in range(1, 8)])
    plt.grid(True)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()
    return buf


async def send_graph(update: Update, context: ContextTypes.DEFAULT_TYPE, days, label):
    user_id = update.effective_user.id
    buf = generate_mood_graph(user_id, days)
    if not buf:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    await update.message.reply_photo(photo=InputFile(buf), caption=f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ {label}")


async def mood_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_graph(update, context, 7, "–Ω–µ–¥–µ–ª—é")


async def mood_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_graph(update, context, 31, "–º–µ—Å—è—Ü")


async def mood_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_graph(update, context, None, "–≤—Å—ë –≤—Ä–µ–º—è")


# –ì–æ—Ä–æ–¥
async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤–æ—Ç —Ç–∞–∫:\n/setcity –ê–ª–º–∞—Ç—ã")
        return
    city = " ".join(context.args)
    user_id = update.effective_user.id
    cursor.execute("REPLACE INTO users (user_id, city) VALUES (?, ?)", (user_id, city))
    conn.commit()
    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")


async def mycity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT city FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if row:
        await update.message.reply_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {row[0]}")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥. –ù–∞–ø–∏—à–∏: /setcity <–≥–æ—Ä–æ–¥>")


# –ü–æ–≥–æ–¥–∞ + –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    cursor.execute("SELECT user_id, city FROM users")
    for user_id, city in cursor.fetchall():
        try:
            # –ü–æ–≥–æ–¥–∞
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid={WEATHER_API_KEY}"
            res = requests.get(url).json()
            temp = res["main"]["temp"]
            desc = res["weather"][0]["description"]
            message = f"üïì –ü–æ—Ä–∞ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! /mood\n\nüå§ –ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {desc}"
        except:
            message = "üïì –ü–æ—Ä–∞ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! /mood"
        await bot.send_message(chat_id=user_id, text=message)


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CallbackQueryHandler(mood_callback))
    app.add_handler(CommandHandler("mood_week", mood_week))
    app.add_handler(CommandHandler("mood_month", mood_month))
    app.add_handler(CommandHandler("mood_all", mood_all))
    app.add_handler(CommandHandler("setcity", setcity))
    app.add_handler(CommandHandler("mycity", mycity))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    app.job_queue.run_daily(daily_reminder, time=datetime.time(hour=13, minute=0))

    app.run_polling()
