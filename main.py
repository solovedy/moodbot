import sqlite3
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio

# Telegram –∏ OpenWeather –∫–ª—é—á–∏
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("moodbot.db", check_same_thread=False)
c = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
c.execute('''CREATE TABLE IF NOT EXISTS moods (
    user_id INTEGER,
    mood INTEGER,
    timestamp TEXT
)''')

c.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    city TEXT
)''')

conn.commit()

# üå§ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    c.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()

    if not row:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /setcity [–≥–æ—Ä–æ–¥]")
        return

    city = row[0]
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    try:
        response = requests.get(url).json()
        weather_description = response["weather"][0]["description"]
        temp = response["main"]["temp"]
        feels = response["main"]["feels_like"]
        humidity = response["main"]["humidity"]
        wind = response["wind"]["speed"]

        emoji = "üå§"
        if "–¥–æ–∂–¥" in weather_description.lower(): emoji = "üåß"
        elif "—è—Å–Ω–æ" in weather_description.lower(): emoji = "‚òÄÔ∏è"
        elif "–æ–±–ª–∞—á–Ω–æ" in weather_description.lower(): emoji = "‚òÅÔ∏è"
        elif "—Å–Ω–µ–≥" in weather_description.lower(): emoji = "‚ùÑÔ∏è"

        # üåà –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ–≥–æ–¥–æ–π
        mood_comment = ""
        if "rain" in weather_description.lower():
            mood_comment = "üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–æ... –ú–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è —Ç–æ—Å–∫–ª–∏–≤–æ, –Ω–æ –ø–ª–µ–¥ –∏ —Ç—ë–ø–ª—ã–π —á–∞–π —Å–ø–∞—Å–∞—é—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É ‚òï"
        elif "cloud" in weather_description.lower():
            mood_comment = "‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –æ–±–ª–∞—á–Ω–æ ‚Äî –∏–Ω–æ–≥–¥–∞ –∏ –Ω–∞ –¥—É—à–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∂–µ. –ü–æ–¥–∞—Ä–∏ —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ üíô"
        elif "clear" in weather_description.lower() or "sun" in weather_description.lower():
            mood_comment = "üåû –Ø—Å–Ω–æ –∏ —Å–æ–ª–Ω–µ—á–Ω–æ! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –ª—é–±–∏–º–æ–≥–æ –¥–µ–ª–∞ ‚ú®"
        elif "snow" in weather_description.lower():
            mood_comment = "‚ùÑÔ∏è –°–Ω–µ–≥ –∑–∞ –æ–∫–Ω–æ–º ‚Äî –∫–∞–∫ –ø–æ–≤–æ–¥ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è –∏ —É–∫—É—Ç–∞—Ç—å—Å—è –≤ —É—é—Ç üí≠"

        await update.message.reply_text(
            f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ {city.title()}:\n"
            f"üìç {weather_description.capitalize()}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n\n"
            f"{mood_comment}"
        )
    except:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞
async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        city = " ".join(context.args)
        user_id = update.message.from_user.id
        c.execute("INSERT OR REPLACE INTO users (user_id, city) VALUES (?, ?)", (user_id, city))
        conn.commit()
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcity [–≥–æ—Ä–æ–¥]")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
async def my_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    c.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    if row:
        await update.message.reply_text(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {row[0]}")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /setcity [–≥–æ—Ä–æ–¥]")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("1 üò©"), KeyboardButton("2 üòü"), KeyboardButton("3 üòï")],
        [KeyboardButton("4 üôÇ"), KeyboardButton("5 üòÑ"), KeyboardButton("6 ü§©"), KeyboardButton("7 ü•≥")],
        [KeyboardButton("/weather")]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 7.\n"
        "–ê –µ—â—ë —è –º–æ–≥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É ‚òÅÔ∏è ‚Äî –∫–æ–º–∞–Ω–¥–∞ /weather\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥: /setcity [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n"
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ä–æ–¥: /mycity",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    try:
        for i in range(1, 8):
            if text.strip().startswith(str(i)):
                mood_value = i
                break
        else:
            raise ValueError("Not a valid mood")

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute("INSERT INTO moods (user_id, mood, timestamp) VALUES (?, ?, ?)", (user_id, mood_value, now))
        conn.commit()

        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üíñ")

    except Exception as e:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 7.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("setcity", set_city))
    app.add_handler(CommandHandler("mycity", my_city))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    import asyncio

    nest_asyncio.apply()

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if str(e).startswith("This event loop is already running"):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Replit
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
            from flask import Flask
from threading import Thread

app_flask = Flask('')

@app_flask.route('/')
def home():
    return "I'm alive!"

def run():
    app_flask.run(host='0.0.0.0', port=8080)

Thread(target=run).start()
