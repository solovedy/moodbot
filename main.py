import os
import sqlite3
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, JobQueue
)
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("mood_data.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS moods (
    user_id INTEGER,
    mood INTEGER,
    date TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS cities (
    user_id INTEGER PRIMARY KEY,
    city TEXT
)''')
conn.commit()

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def send_mood_reminder(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    keyboard = [
        [
            InlineKeyboardButton("üòû", callback_data="1"),
            InlineKeyboardButton("üôÅ", callback_data="2"),
            InlineKeyboardButton("üòê", callback_data="3"),
            InlineKeyboardButton("üôÇ", callback_data="4"),
            InlineKeyboardButton("üòÑ", callback_data="5"),
            InlineKeyboardButton("ü§©", callback_data="6"),
            InlineKeyboardButton("üî•", callback_data="7")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text="–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)

# –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
def get_average_mood(user_id, days=None):
    if days:
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        cursor.execute("SELECT mood FROM moods WHERE user_id=? AND date >= ?", (user_id, start_date))
    else:
        cursor.execute("SELECT mood FROM moods WHERE user_id=?", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        return None
    return sum(row[0] for row in rows) / len(rows)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /mood, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")

async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üòû", callback_data="1"),
            InlineKeyboardButton("üôÅ", callback_data="2"),
            InlineKeyboardButton("üòê", callback_data="3"),
            InlineKeyboardButton("üôÇ", callback_data="4"),
            InlineKeyboardButton("üòÑ", callback_data="5"),
            InlineKeyboardButton("ü§©", callback_data="6"),
            InlineKeyboardButton("üî•", callback_data="7")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=reply_markup)

async def mood_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    mood = int(query.data)
    user_id = query.from_user.id
    date = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("INSERT INTO moods (user_id, mood, date) VALUES (?, ?, ?)", (user_id, mood, date))
    conn.commit()
    await query.answer("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! üòä")

async def mood_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    avg = get_average_mood(update.effective_user.id, 7)
    if avg is None:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é.")
    else:
        await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {avg:.1f}")

async def mood_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    avg = get_average_mood(update.effective_user.id, 30)
    if avg is None:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü.")
    else:
        await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü: {avg:.1f}")

async def mood_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    avg = get_average_mood(update.effective_user.id)
    if avg is None:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text(f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {avg:.1f}")

async def setcity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        city = " ".join(context.args)
        cursor.execute("REPLACE INTO cities (user_id, city) VALUES (?, ?)", (update.effective_user.id, city))
        conn.commit()
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /setcity –ê–ª–º–∞—Ç—ã")

async def mycity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT city FROM cities WHERE user_id=?", (update.effective_user.id,))
    row = cursor.fetchone()
    if row:
        city = row[0]
        await update.message.reply_text(f"–¢–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {city}")
    else:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /setcity <–≥–æ—Ä–æ–¥>.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
/start ‚Äî –Ω–∞—á–∞—Ç—å
/mood ‚Äî —É–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/mood_week ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é
/mood_month ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü
/mood_all ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
/setcity <–≥–æ—Ä–æ–¥> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥
/mycity ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥
/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
""")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
app = Flask('')
@app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    keep_alive()
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mood", mood))
    application.add_handler(CallbackQueryHandler(mood_callback))
    application.add_handler(CommandHandler("mood_week", mood_week))
    application.add_handler(CommandHandler("mood_month", mood_month))
    application.add_handler(CommandHandler("mood_all", mood_all))
    application.add_handler(CommandHandler("setcity", setcity))
    application.add_handler(CommandHandler("mycity", mycity))
    application.add_handler(CommandHandler("help", help_command))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    async def schedule_reminders(app):
        for chat_id in set(row[0] for row in cursor.execute("SELECT DISTINCT user_id FROM moods")):
            application.job_queue.run_daily(
                send_mood_reminder,
                time=datetime.now().time(),  # –ª—é–±–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è
                chat_id=chat_id
            )
    application.job_queue.run_once(lambda c: schedule_reminders(application), when=1)
    application.run_polling()
