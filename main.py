import os
import sqlite3
import datetime
import requests
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler, ContextTypes

TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
mood_levels = {
    1: "üòû –û—á–µ–Ω—å –ø–ª–æ—Ö–æ",
    2: "üòï –ü–ª–æ—Ö–æ",
    3: "üòê –¢–∞–∫ —Å–µ–±–µ",
    4: "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
    5: "üòä –•–æ—Ä–æ—à–æ",
    6: "üòÑ –û—Ç–ª–∏—á–Ω–æ",
    7: "ü§© –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ"
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect("mood_data.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS mood (
    user_id INTEGER,
    mood INTEGER,
    date TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    city TEXT
)''')
conn.commit()

# –ü–æ–≥–æ–¥–∞
def get_weather(city):
    try:
        key = os.getenv("WEATHER_API_KEY")
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={key}&units=metric&lang=ru"
        data = requests.get(url).json()
        temp = data["main"]["temp"]
        condition = data["weather"][0]["description"].capitalize()
        return f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {condition}."
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üåß"

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n–ö–æ–º–∞–Ω–¥–∞ /mood —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!")

# –ö–æ–º–∞–Ω–¥–∞ /mood
async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(text, callback_data=str(level))] for level, text in mood_levels.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞–∫ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def mood_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    mood = int(query.data)
    user_id = query.from_user.id
    today = datetime.date.today().isoformat()

    cursor.execute("INSERT INTO mood (user_id, mood, date) VALUES (?, ?, ?)", (user_id, mood, today))
    conn.commit()

    await query.answer("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if mood <= 3:
        text = "üíô –ü–æ—Ö–æ–∂–µ, –Ω–µ –ª—É—á—à–∏–π –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π /breathe, /motivate –∏–ª–∏ /task"
    elif mood <= 5:
        text = "üíõ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫! –ú–æ–∂–µ—à—å –≥–ª—è–Ω—É—Ç—å /joke –¥–ª—è —É–ª—ã–±–∫–∏."
    else:
        text = "üíö –ö—Ä—É—Ç–æ! –ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º ‚ú®"

    await query.edit_message_text(f"–¢–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_levels[mood]}\n{text}")

# –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats(user_id, days=None):
    if days:
        start_date = (datetime.date.today() - datetime.timedelta(days=days)).isoformat()
        cursor.execute("SELECT mood FROM mood WHERE user_id = ? AND date >= ?", (user_id, start_date))
    else:
        cursor.execute("SELECT mood FROM mood WHERE user_id = ?", (user_id,))
    moods = cursor.fetchall()
    return [m[0] for m in moods]

async def mood_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    moods = get_stats(update.message.from_user.id, 7)
    await send_mood_summary(update, moods, "–∑–∞ –Ω–µ–¥–µ–ª—é")

async def mood_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    moods = get_stats(update.message.from_user.id, 30)
    await send_mood_summary(update, moods, "–∑–∞ –º–µ—Å—è—Ü")

async def mood_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    moods = get_stats(update.message.from_user.id)
    await send_mood_summary(update, moods, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")

async def send_mood_summary(update, moods, period):
    if not moods:
        await update.message.reply_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö {period} üòï")
        return
    avg = sum(moods) / len(moods)
    mood_label = mood_levels[round(avg)]
    await update.message.reply_text(f"üìä –¢–≤–æ—ë —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {period}: {mood_label} ({avg:.2f})")

# –ì–æ—Ä–æ–¥
async def setcity(update: Update, context: CallbackContext):
    if context.args:
        city = " ".join(context.args)
        user_id = update.message.from_user.id
        cursor.execute("REPLACE INTO users (user_id, city) VALUES (?, ?)", (user_id, city))
        conn.commit()
        await update.message.reply_text(f"üèô –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /setcity Almaty")

async def mycity(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    cursor.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result and result[0]:
        await update.message.reply_text(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {result[0]}")
    else:
        await update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /setcity")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def daily_reminder(app):
    while True:
        now = datetime.datetime.now()
        if now.hour == 16 and now.minute == 0:
            cursor.execute("SELECT user_id, city FROM users")
            for user_id, city in cursor.fetchall():
                weather = get_weather(city) if city else "üèô –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –∫–æ–º–∞–Ω–¥–æ–π /setcity"
                try:
                    await app.bot.send_message(chat_id=user_id, text=f"üåû –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º!\n{weather}")
                except:
                    continue
            await asyncio.sleep(60)
        await asyncio.sleep(30)

# /help
async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text("""üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å
/mood ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/mood_week ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é
/mood_month ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü
/mood_all ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
/setcity [–≥–æ—Ä–æ–¥] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥
/mycity ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥""")

# Flask –¥–ª—è UptimeRobot
flask_app = Flask('')
@flask_app.route('/')
def home():
    return "Bot is alive"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    from telegram.ext import ApplicationBuilder

    keep_alive()

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mood", mood))
    app.add_handler(CommandHandler("mood_week", mood_week))
    app.add_handler(CommandHandler("mood_month", mood_month))
    app.add_handler(CommandHandler("mood_all", mood_all))
    app.add_handler(CommandHandler("setcity", setcity))
    app.add_handler(CommandHandler("mycity", mycity))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(mood_callback))

    loop = asyncio.get_event_loop()
    loop.create_task(daily_reminder(app))

    app.run_polling()
