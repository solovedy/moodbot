import logging
import sqlite3
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

from datetime import datetime
import matplotlib.pyplot as plt
import os

# üîê –°–µ–∫—Ä–µ—Ç—ã
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEATHER_API_KEY = os.environ.get("WEATHER_API_KEY")

# üì¶ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# üìÇ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect("mood_data.db")
c = conn.cursor()

c.execute('''
CREATE TABLE IF NOT EXISTS moods (
    user_id INTEGER,
    mood INTEGER,
    timestamp TEXT
)
''')

c.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    city TEXT
)
''')

conn.commit()

# üåà –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
mood_scale = {
    1: "üòû –û—á–µ–Ω—å –ø–ª–æ—Ö–æ",
    2: "üòü –ü–ª–æ—Ö–æ",
    3: "üòê –¢–∞–∫ —Å–µ–±–µ",
    4: "üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ",
    5: "üòä –•–æ—Ä–æ—à–æ",
    6: "üòÑ –û—Ç–ª–∏—á–Ω–æ",
    7: "ü§© –°—É–ø–µ—Ä!"
}

# üñºÔ∏è –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
keyboard = ReplyKeyboardMarkup(
    [[f"{i}. {mood_scale[i]}"] for i in range(1, 8)],
    one_time_keyboard=True,
    resize_keyboard=True
)

# üöÄ –ö–æ–º–∞–Ω–¥—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üåà\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /mood —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/mood ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
        "/mood_week ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/mood_month ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü\n"
        "/mood_all ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n"
        "/setcity ‚Äî —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ üåç\n"
        "/mycity ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥\n"
        "/weather ‚Äî –ø–æ–≥–æ–¥–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ ‚òÄÔ∏è"
    )

async def mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    try:
        for i in range(1, 8):
            if text.strip().startswith(str(i)):
                mood_value = i
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                c.execute("INSERT INTO moods (user_id, mood, timestamp) VALUES (?, ?, ?)", (user_id, mood_value, now))
                conn.commit()

                # üéØ –ü–æ–¥—Å–∫–∞–∑–∫–∏
                tip = ""
                if mood_value <= 2:
                    tip = "üí° –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /breathe –¥–ª—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –∏–ª–∏ /motivate –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏!"
                elif mood_value <= 4:
                    tip = "üòä –•–æ—á–µ—à—å —É–ª—ã–±–Ω—É—Ç—å—Å—è? –í–≤–µ–¥–∏ /joke!"
                else:
                    tip = "üåü –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

                await update.message.reply_text(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {mood_scale[mood_value]}\n{tip}")
                break
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")
    except:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")

# üìä –ì—Ä–∞—Ñ–∏–∫–∏
def generate_chart(user_id, period):
    c.execute(f"SELECT timestamp, mood FROM moods WHERE user_id = ? ORDER BY timestamp", (user_id,))
    rows = c.fetchall()

    if period == "week":
        title = "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é"
        rows = rows[-7:]
    elif period == "month":
        title = "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü"
        rows = rows[-30:]
    else:
        title = "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"

    if not rows:
        return None

    dates = [row[0][:10] for row in rows]
    moods = [row[1] for row in rows]

    plt.figure(figsize=(8, 4))
    plt.plot(dates, moods, marker='o', color='purple')
    plt.ylim(1, 7)
    plt.xticks(rotation=45)
    plt.title(title)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    plt.grid(True)
    plt.tight_layout()
    filename = f"mood_chart_{user_id}.png"
    plt.savefig(filename)
    plt.close()
    return filename

async def mood_chart(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str):
    user_id = update.message.from_user.id
    chart = generate_chart(user_id, period)
    if chart:
        await update.message.reply_photo(photo=open(chart, 'rb'))
        os.remove(chart)
    else:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

async def mood_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mood_chart(update, context, "week")

async def mood_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mood_chart(update, context, "month")

async def mood_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await mood_chart(update, context, "all")

# üåç –ü–æ–≥–æ–¥–∞

async def set_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        city = " ".join(context.args)
        user_id = update.message.from_user.id
        c.execute("INSERT OR REPLACE INTO users (user_id, city) VALUES (?, ?)", (user_id, city))
        conn.commit()
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcity [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]")

async def my_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    c.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    if row:
        await update.message.reply_text(f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {row[0]}")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /setcity [–≥–æ—Ä–æ–¥]")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    c.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()

    if not row:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /setcity [–≥–æ—Ä–æ–¥]")
        return

    city = row[0]
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    try:
        response = requests.get(url).json()
        weather_description = response["weather"][0]["description"]
        weather_text = weather_description.capitalize()

        mood_comment = ""
        if "rain" in weather_description.lower():
            mood_comment = "üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–æ... –ú–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è —Ç–æ—Å–∫–ª–∏–≤–æ, –Ω–æ –ø–ª–µ–¥ –∏ —Ç—ë–ø–ª—ã–π —á–∞–π —Å–ø–∞—Å–∞—é—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É ‚òï"
        elif "cloud" in weather_description.lower():
            mood_comment = "‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –æ–±–ª–∞—á–Ω–æ ‚Äî –∏–Ω–æ–≥–¥–∞ –∏ –Ω–∞ –¥—É—à–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∂–µ. –ü–æ–¥–∞—Ä–∏ —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ üíô"
        elif "clear" in weather_description.lower() or "sun" in weather_description.lower():
            mood_comment = "üåû –Ø—Å–Ω–æ –∏ —Å–æ–ª–Ω–µ—á–Ω–æ! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –ª—é–±–∏–º–æ–≥–æ –¥–µ–ª–∞ ‚ú®"
        elif "snow" in weather_description.lower():
            mood_comment = "‚ùÑÔ∏è –°–Ω–µ–≥ –∑–∞ –æ–∫–Ω–æ–º ‚Äî –∫–∞–∫ –ø–æ–≤–æ–¥ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è –∏ —É–∫—É—Ç–∞—Ç—å—Å—è –≤ —É—é—Ç üí≠"

        temp = response["main"]["temp"]
        feels = response["main"]["feels_like"]
        humidity = response["main"]["humidity"]
        wind = response["wind"]["speed"]

        emoji = "üå§"
        if "–¥–æ–∂–¥" in weather_text.lower(): emoji = "üåß"
        elif "—è—Å–Ω–æ" in weather_text.lower(): emoji = "‚òÄÔ∏è"
        elif "–æ–±–ª–∞—á–Ω–æ" in weather_text.lower(): emoji = "‚òÅÔ∏è"
        elif "—Å–Ω–µ–≥" in weather_text.lower(): emoji = "‚ùÑÔ∏è"

        await update.message.reply_text(
            f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üìç {weather_text}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n\n"
            f"{mood_comment}"
        )
    except:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# üîÅ –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("mood", mood))
app.add_handler(CommandHandler("mood_week", mood_week))
app.add_handler(CommandHandler("mood_month", mood_month))
app.add_handler(CommandHandler("mood_all", mood_all))
app.add_handler(CommandHandler("setcity", set_city))
app.add_handler(CommandHandler("mycity", my_city))
app.add_handler(CommandHandler("weather", weather))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
